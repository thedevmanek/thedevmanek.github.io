<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dev&#39;s Blog</title>
  
  <subtitle>A dev blog by dev</subtitle>
  <link href="https://thedevmanek.com/atom.xml" rel="self"/>
  
  <link href="https://thedevmanek.com/"/>
  <updated>2023-12-05T18:37:45.373Z</updated>
  <id>https://thedevmanek.com/</id>
  
  <author>
    <name>Dev Manek</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Day2:-ESP-IDF messing around with CMake</title>
    <link href="https://thedevmanek.com/2023/12/05/ESP-IDF-Messing-around-with-nimble-BLE-peripheral/"/>
    <id>https://thedevmanek.com/2023/12/05/ESP-IDF-Messing-around-with-nimble-BLE-peripheral/</id>
    <published>2023-12-05T13:55:36.000Z</published>
    <updated>2023-12-05T18:37:45.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Adding-a-new-component-ble-peripheral"><a href="#Adding-a-new-component-ble-peripheral" class="headerlink" title="Adding a new component - ble peripheral"></a>Adding a new component - ble peripheral</h2><p>Now that the setup is complete, let’s talk about components. Code modularity is crucial, and in ESP-IDF, we achieve that by creating components. However, creating a component requires some knowledge of CMake and C. A component is essentially a standalone set of code that can be used in the main file or other components. Here’s a quick look at my code structure.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">├── CMakeLists<span class="selector-class">.txt</span></span><br><span class="line">├── components</span><br><span class="line">│   ├── common</span><br><span class="line">│   │   ├── nimble_central_utils</span><br><span class="line">│   │   └── nimble_peripheral_utils</span><br><span class="line">│   └── nimble-ble-prph</span><br><span class="line">│       ├── CMakeLists<span class="selector-class">.txt</span></span><br><span class="line">│       ├── gatt_svr<span class="selector-class">.c</span></span><br><span class="line">│       ├── include</span><br><span class="line">│       ├── Kconfig<span class="selector-class">.projbuild</span></span><br><span class="line">│       └── nimble-ble-prph<span class="selector-class">.c</span></span><br><span class="line">├── dependencies<span class="selector-class">.lock</span></span><br><span class="line">├── LICENSE</span><br><span class="line">├── <span class="selector-tag">main</span></span><br><span class="line">│   ├── CMakeLists<span class="selector-class">.txt</span></span><br><span class="line">│   ├── idf_component<span class="selector-class">.yml</span></span><br><span class="line">│   └── <span class="selector-tag">main</span><span class="selector-class">.c</span></span><br><span class="line">├── README<span class="selector-class">.md</span></span><br><span class="line">├── sdkconfig</span><br><span class="line">├── sdkconfig<span class="selector-class">.defaults</span></span><br><span class="line">└── sdkc</span><br></pre></td></tr></table></figure><p>The <code>common</code> directory holds essential files frequently utilized alongside a module. Meanwhile, the <code>nimble-ble-prph</code> component is centered around the <code>nimble-ble-prph.c</code> file, housing the bulk of the code.</p><h2 id="CMake-structure-for-the-project"><a href="#CMake-structure-for-the-project" class="headerlink" title="CMake structure for the project"></a>CMake structure for the project</h2><p>Starting with the high-level <code>CMakeLists.txt</code>:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.16</span>)</span><br><span class="line"><span class="keyword">set</span>(EXTRA_COMPONENT_DIRS components/common/nimble_peripheral_utils)</span><br><span class="line"><span class="keyword">include</span>($ENV&#123;IDF_PATH&#125;/tools/cmake/<span class="keyword">project</span>.cmake)</span><br><span class="line"><span class="keyword">project</span>(assistive-shoulder-firmware)</span><br></pre></td></tr></table></figure><ul><li><code>cmake_minimum_required</code>: Specifying the CMake version.</li><li><code>set</code>: Defining the location for the essential <code>common</code> component.</li><li><code>include</code>: Incorporating essential configurations from <code>project.cmake</code>.</li></ul><p>Now, the core <code>CMakeLists.txt</code> in the main folder:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">idf_component_register(SRCS <span class="string">&quot;main.c&quot;</span></span><br><span class="line">                    INCLUDE_DIRS <span class="string">&quot;.&quot;</span></span><br><span class="line">        REQUIRES nimble-ble-prph)</span><br></pre></td></tr></table></figure><ul><li><code>REQUIRES</code>: Integrating the <code>nimble-ble-prph</code> component as a dependency.</li></ul><p>Lastly, the pivotal <code>CMakeLists.txt</code> for the <code>nimble-ble-prph</code> component:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(srcs <span class="string">&quot;main.c&quot;</span>)</span><br><span class="line">idf_component_register(SRCS <span class="string">&quot;nimble-ble-prph.c&quot;</span> <span class="string">&quot;gatt_svr.c&quot;</span></span><br><span class="line">                       INCLUDE_DIRS <span class="string">&quot;include&quot;</span></span><br><span class="line">                       REQUIRES  nvs_flash nimble_peripheral_utils bt</span><br><span class="line">                       )</span><br></pre></td></tr></table></figure><ul><li><code>SRCS</code>: Enumerating source files for the compilation process.</li><li><code>INCLUDE_DIRS</code>: Specifying directories for header files.</li><li><code>REQUIRES</code>: Listing dependencies, including components like <code>nvs_flash</code>, <code>nimble_peripheral_utils</code>, and <code>bt</code>. CMake kindly reminds us if we miss one.Awww!🥺<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Compilation failed because nimble-ble-prph.c (in &quot;nimble-ble-prph&quot; component) includes nvs_flash.h, provided by nvs_flash component(s).</span><br><span class="line">However, nvs_flash component(s) is not in the requirements list of &quot;nimble-ble-prph&quot;.</span><br><span class="line">To fix this, add nvs_flash to PRIV_REQUIRES list of idf_component_register call in /home/thedevmanek/Documents/Group Projects/assistive-shoulder-firmware/components/nimble-ble-prph/CMakeLists.txt.</span><br></pre></td></tr></table></figure>I want to talk more about what I am trying to do with <code>bluetooth</code> but I will do that in the next post.I know it is sad but I am hungry. BYE!</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Adding-a-new-component-ble-peripheral&quot;&gt;&lt;a href=&quot;#Adding-a-new-component-ble-peripheral&quot; class=&quot;headerlink&quot; title=&quot;Adding a new compo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Day1:-ESP-IDF set up for a project</title>
    <link href="https://thedevmanek.com/2023/12/03/ESP-IDF-set-up-for-a-project/"/>
    <id>https://thedevmanek.com/2023/12/03/ESP-IDF-set-up-for-a-project/</id>
    <published>2023-12-03T12:14:43.000Z</published>
    <updated>2023-12-03T15:01:13.999Z</updated>
    
    <content type="html"><![CDATA[<h2 id="My-Setup"><a href="#My-Setup" class="headerlink" title="My Setup"></a>My Setup</h2><p>I’ve chosen CLion as my weapon of choice for this project, thanks to its slick built-in MISRA C support (we’ll dig into that later). Currently, I’m cruising on my Dell G15 5515 Ryzen edition, running a dual-boot setup with Windows 11 and Ubuntu 22.04 LTS. (Yep, I’ve played with Arch, but no way am I sacrificing ROS for it!) </p><h2 id="Starting-Fresh-with-ESP-IDF"><a href="#Starting-Fresh-with-ESP-IDF" class="headerlink" title="Starting Fresh with ESP-IDF"></a>Starting Fresh with ESP-IDF</h2><p>I began by installing ESP-IDF from scratch. Everything seemed fine until I tried to install the specific esp32-c6 version. The compiler didn’t find ‘xtensa-esp32-elf-gcc’, which was weird for a fresh install.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">CMake</span> <span class="title class_">Error</span> at /home/thedevmanek/esp/esp-idf/tools/cmake/project.<span class="symbol">cmake:</span><span class="number">448</span> </span><br><span class="line">(__project)<span class="symbol">:The</span> <span class="variable constant_">CMAKE_C_COMPILER</span><span class="symbol">:xtensa-esp32-elf-gcc</span></span><br></pre></td></tr></table></figure><p>To fix this, I reinstalled ESP-IDF without specifying the chip version, and that worked like a charm. I ran the “hello-world” example, and yay, it worked!</p><h2 id="Getting-the-Project-on-Track"><a href="#Getting-the-Project-on-Track" class="headerlink" title="Getting the Project on Track"></a>Getting the Project on Track</h2><p>I believe in starting a project right, and that means having a solid <a href="https://github.com/thedevmanek/assistive-shoulder-firmware/blob/main/README.md">README.md</a>. I goofed a bit during a pull request (PR) – didn’t do the squash and merge thing 😭. No worries, though. I fixed it by reverting, adding a note about squash and merge in the README, and finally merging the PR.</p><p>Now, let’s talk security for PRs. I added some important stuff:</p><ul><li><strong>Only Verified Commits Allowed:</strong> Making sure each commit is legit.</li><li><strong>Need at Least 1 Review to Merge:</strong> Double-checking things with another set of eyes.</li><li><strong>Sort Out Comments Before Merging:</strong> Making sure all comments are resolved before the merge happens.</li></ul><p>These steps might sound like a lot, but they’re just my way of making sure our project stays strong and secure.</p><p>Whenever I start a new project on GitHub, I make it a point to create a fresh file in the Projects folder. This little step goes a long way in keeping things organized. It’s like having a virtual whiteboard where I jot down features and track progress. Plus, it acts as a public commitment, showing that I’m all in for the success of the project. It’s my way of saying, “Hey world, here’s what we’re working on, and we’re committed to making it awesome!” 🚀</p><h2 id="Some-Test-with-Bluetooth"><a href="#Some-Test-with-Bluetooth" class="headerlink" title="Some Test with Bluetooth"></a>Some Test with Bluetooth</h2><h3 id="Bluetooth-Testing-and-ESP32-C6-Quirk"><a href="#Bluetooth-Testing-and-ESP32-C6-Quirk" class="headerlink" title="Bluetooth Testing and ESP32-C6 Quirk"></a>Bluetooth Testing and ESP32-C6 Quirk</h3><blockquote><p>Pro tip: Stick to examples from the esp-idf installation folder. It’s a good shield against the notorious big breaking changes. And hey, consider using the LTS version for a smoother ride – fewer surprises, fewer changes to handle.</p></blockquote><p>I ran some Bluetooth tests to ensure everything was smooth, but here’s the catch: ESP32-C6 doesn’t work with Bluetooth classic; it only supports BLE. Save yourself from potential debugging headaches like this.</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">undefined reference <span class="keyword">to</span> `esp_ble_gap_start_advertising<span class="comment">&#x27;</span></span><br><span class="line"><span class="symbol">collect2:</span> <span class="keyword">error</span>: ld returned <span class="number">1</span> <span class="keyword">exit</span> status</span><br></pre></td></tr></table></figure><blockquote><p>Quick tip: Always check the board compatibility info in the examples. The Espressif folks graciously provide this. Don’t end up being a 🤡 like me!</p></blockquote><h3 id="More-dumb-dev-moments"><a href="#More-dumb-dev-moments" class="headerlink" title="More dumb dev moments"></a>More dumb dev moments</h3><p>So, after ghosting ESP-IDF for a good two months, my lack of practice really hit me hard! Tried compiling my project and bam, two things I totally spaced on.</p><p>First off, this line will make your life hell if you ignore it!Newer ESP-IDF versions politely nudge you about it but try to be a good human.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REQUIRES esp_wifi bt esp_hid driver</span><br></pre></td></tr></table></figure><p>Don’t forget to throw in all your source files. I didn’t, and let me tell you, it led to some serious pondering about life choices. Just trust me on this one:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SRCS <span class="string">&quot;bluetooth-controller.c&quot;</span></span><br></pre></td></tr></table></figure><p>Oh, and one more thing – check that your <code>#include</code> game is strong, and in your main folder’s CMakeLists, shout out the name of your component like:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REQUIRES bluetooth-controller</span><br></pre></td></tr></table></figure><p>What’s a component, you ask? I’ll spill the beans in the next blog post. But first, coffee ☕️ and then time to get back to the grind!<br>PS:-I just got a new domain from <a href="https://porkbun.com/">porkbun</a> for just £7.6 a year so check them out ig?</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;My-Setup&quot;&gt;&lt;a href=&quot;#My-Setup&quot; class=&quot;headerlink&quot; title=&quot;My Setup&quot;&gt;&lt;/a&gt;My Setup&lt;/h2&gt;&lt;p&gt;I’ve chosen CLion as my weapon of choice for t</summary>
      
    
    
    
    
  </entry>
  
</feed>
